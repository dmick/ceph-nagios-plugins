#!/usr/bin/env python
#
#  Copyright (c) 2013-2016 SWITCH http://www.switch.ch
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import argparse
import json
import os
import subprocess
import sys
import re

__version__ = '1.5.2'

# default ceph values
CEPH_COMMAND = '/usr/bin/ceph'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph health' nagios plugin.")
    parser.add_argument('-e','--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('--cluster', help='ceph cluster name')
    parser.add_argument('-c','--conf', help='alternative ceph conf file')
    parser.add_argument('-m','--monaddress', help='ceph monitor address[:port]')
    parser.add_argument('-i','--id', help='ceph client id')
    parser.add_argument('-n','--name', help='ceph client name')
    parser.add_argument('-k','--keyring', help='ceph client keyring file')
    parser.add_argument('-w','--whitelist', help='whitelist regexp for ceph health warnings')
    parser.add_argument('-d','--detail', help="exec 'ceph health detail'", action='store_true')
    parser.add_argument('-V','--version', help='show version and exit', action='store_true')
    args = parser.parse_args()

    # validate args
    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if not os.path.exists(ceph_exec):
        print "ERROR: ceph executable '%s' doesn't exist" % ceph_exec
        return STATUS_UNKNOWN

    if args.version:
        print 'version %s' % __version__
        return STATUS_OK

    if args.conf and not os.path.exists(args.conf):
        print "ERROR: ceph conf file '%s' doesn't exist" % args.conf
        return STATUS_UNKNOWN

    if args.keyring and not os.path.exists(args.keyring):
        print "ERROR: keyring file '%s' doesn't exist" % args.keyring
        return STATUS_UNKNOWN

    # build command
    ceph_health = [ceph_exec]
    if args.monaddress:
        ceph_health.append('-m')
        ceph_health.append(args.monaddress)
    if args.cluster:
        ceph_health.append('--cluster')
        ceph_health.append(args.cluster)
    if args.conf:
        ceph_health.append('-c')
        ceph_health.append(args.conf)
    if args.id:
        ceph_health.append('--id')
        ceph_health.append(args.id)
    if args.name:
        ceph_health.append('--name')
        ceph_health.append(args.name)
    if args.keyring:
        ceph_health.append('--keyring')
        ceph_health.append(args.keyring)
    ceph_health.append('health')
    if args.detail:
        ceph_health.append('detail')
    ceph_health.extend(('-f', 'json'))

    #print ceph_health

    # exec command
    p = subprocess.Popen(ceph_health,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, err = p.communicate()

    # parse output
    #print "output:", output
    #print "err:", err
    return_status = STATUS_OK
    healthstr_to_status = {
        'HEALTH_OK': STATUS_OK,
        'HEALTH_WARN': STATUS_WARNING,
        'HEALTH_ERR': STATUS_ERROR,
    }
    status_to_healthstr = dict(
        (v, k) for k, v in healthstr_to_status.iteritems()
    )

    def max_severity(return_status, status_string):
        status = healthstr_to_status[status_string]
        return max(return_status, status)

    if output:
        try:
            out = json.loads(output)
        except ValueError as e:
            print 'Error parsing JSON: %s', e
            return STATUS_UNKNOWN

        svc_errs = {}
        health_svcs = out['health']['health_services']
        for svcdict in health_svcs:
            for svctype in svcdict.keys():
                for svc in svcdict[svctype]:
                    if svc['health'] != 'HEALTH_OK':
                        svc_errs[svctype] = svc
                        return_status = max_severity(
                            return_status,
                            svc['health']
                        )

        time_errs = {}
        for time in out['timechecks']['mons']:
            if time['health'] != 'HEALTH_OK':
                time_errs[mon['name']] = time
                return_status = max_severity(return_status, time['health'])

        summary_errs = list()
        summary = out['summary']
        for item in summary:
            if item['severity'] == 'HEALTH_OK':
                continue
            # save any non-OK errors...
            summary_errs.append('{severity}: {summary}'.format(**item))
            # ... but don't credit whitelist errors in the overall status
            if (args.whitelist and
                re.search(args.whitelist, item['summary'])
            ):
                continue
            return_status = max_severity(return_status, item['severity'])

        if return_status == STATUS_OK:
            print "HEALTH_OK"
            return return_status

        # overall status
        print status_to_healthstr[return_status]

        # detail: dump the status dicts
        for svctype in svc_errs.keys():
            for error in svc_errs[svctype]:
                print error

        for error in time_errs:
            print error

        for error in summary_errs:
            print error

        return return_status

    elif err:
        # read only first line of error
        one_line = err.split('\n')[0]
        if '-1 ' in one_line:
            idx = one_line.rfind('-1 ')
            print 'ERROR: %s: %s' % (ceph_exec, one_line[idx+len('-1 '):])
        else:
            print one_line

    return STATUS_UNKNOWN


if __name__ == "__main__":
    sys.exit(main())

